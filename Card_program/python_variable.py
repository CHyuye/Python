"""
    变量 ：
    1、变量的引用
    2、可变和不可变类型
    3、全局变量和局部变量
"""
"""
    1、变量的引用 —— 变量和数据都是保存在内存中
     在python中函数的参数传递以及返回值都是靠引用传递
     变量和数据是分开存储的
     数据保存在内存中的一个位置
     变量保存着数据在内存的地址
     变量中记录数据的地址就叫引用
     id() 方法可以查看变量中保存数据所在的内存地址
"""
# 注意：当给一个变量赋值的时候，本质上是修改了数据的引用
# · 变量不再对之前的数据引用
# · 变量改为对新赋值的数据引用


# def test(num):
#
#     print("在函数内部{} 对应的内存地址是 {}".format(num, id(num)))
#
#     # 1> 定义一个字符串变量
#     result = "Hello"
#
#     # 2> 将字符串变量返回，返回的是数据的引用，而不是数据本身
#     return result
#
# # 定义一个数字变量
# a = 10
#
# # 数据的地址本质上就是一个数字
# print("a的变量保存的数据内存地址是 {}".format(id(a)))
#
# # 调用test函数，本质上传递的是实参保存的数据引用，而不是实参保存的数字
# # 注意：如果函数有返回值，但没有调用函数，程序不报错，但无返回结果
# r = test(a)
#
# print("{}的内存地址是 {}".format(r, id(r)))

# 注意：字典的key只能使用不可变类型的数据
# 字典的value可以是任意的类型数据
"""
    可变类型和不可变类型
    · 不可变类型 —— 内存的数据不允许被修改
    ·数字类型 int, bool, float, complex, long(2,x)
    ·字符串 str
    ·元组 tuple
    
    · 可变类型 ——内存数据允许修改
    ·列表 list
    ·字典 dictionary
"""

# 可变类型的数据变化是通过方法来实现的
# 如果给一个可变类型的变量，赋值了一个新的数据，引用会修改，变量改为对新赋值的·引用
# 注意：字典的key只能使用不可变类型的数据


# 全局变量 and 局部变量
"""
    局部变量特点
    1、局部变量是在函数内部定义的变量，只能在函数内部使用
    2、函数执行结束后，函数内部的局部变量，会被系统回收
    3、不同的函数，可以定义相同的名字的局部变量，但是各自不会产生影响
"""


# def demo1():
#
#     num = 10
#     print("demo1 ==> {}".format(num))
#
#
# def demo2():
#
#     num = 99
#     print("demo2 ==> {}".format(num))
#
#
# demo1()
# demo2()


# 全局变量
"""
    特点1、函数不能直接修改全局变量的引用
    特点2、global方法，修改全局变量
    特点3、全局变量的定位应该字所有函数上方，保证函数可以访问到每个全局变量
"""
# 全局变量的命名
gl_num = 99
gl_name = "Allen"


def demo1():

    # 函数不能直接修改全局变量的引用
    # 如果使用赋值语句，会在函数内部定义一个局部变量

    # 修改全局变量使用global声明一下后面的是全局变量，再使用赋值语句就不会创建局部变量
    # global num
    num = 10
    print("demo1 ==> {}".format(num))


def demo2():

    print("demo2 ==> {}".format(gl_num))
    print("{}" .format(gl_name))


demo1()
demo2()